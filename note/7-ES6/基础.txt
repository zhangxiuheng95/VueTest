ECMAScript 6
European Compute Manufacyurers Association 欧洲计算机制造联合会  评估、开发和认可电信和计算机标准

ECMA是标准，JavaScript是实现
    类似HTML5是标准，IE10是实现
    目的是让所有前端脚本都实现ECMA
    目前只有JavaScript实现ECMA标准

目前版本
    高级支持ES6
    低级主要ES3.1

出台标准
    0：strawman 提交最初想法
    1：proposal 提案
    2：draft 草案
    3：candidate 候选
    4：finished 完成

let和const
    var 不好用  可以重复声明，无法限制修改，没有块级作用域 ,支持变量提升

    let
        声明的变量，只在let命令所在的代码块内有效
        不存在变量提升
        不允许在相同的作用域内，重复声明一个变量

    const
        声明一个只读的变量，不能更改
        声明的变量不能改变值，即一但声明，必须初始化
        声明的变量，只在声明所在的块级作用域内有效
        声明的常量不提升，只能在声明的位置后使用
        不可重复声明
        声明的复合类型数据（主要对象和数组），变量指向的内存地址     复合数据内容存在堆内存，栈内存内保存的是堆内存的地址，可修改堆内存的内容，不可修改栈内存内的地址数据


箭头函数Arow Funcation
    function  变成   =>  放在参数和函数体中间
        const fun1=function(x){
            return x*x;
        }
    如果没有参数，或有多个参数，需要使用()来定义参数列表
        const fun2=(x)=>{return x*x};
    如果有一个参数，可以省略()
        const fun2=x=>{ return x*x};
    如果函数体内只有一条语句，可以不用{},就不用使用return
        const fun2=x=>x*x;

    关于箭头函数中this的指向
        普通函数的this：指向它的调用者，如果没有调用者，则默认指向window
        箭头函数的this：指向箭头函数定义时所处的对象，而不是箭头函数使用时所在的对象，默认使用父级的this

        箭头函数没有自己的this，它的this是继承而来的，默认指向定义它时所处的对象（宿主对象）


数组新增高级方法
    let goods=[30,38,2,287,69,9];
    filter过滤器
        let goods1= goods.filter(function(n) {
             return n>10;
         })
         let goods1=goods.filter(n=>n>10);
    map映射
        let goods2=goods1.map(function(n){
            return n/2;
        })
        let goods2=goods1.map(n=>n/2);
    reduce汇总
        let sum=goods2.reduce(function(s,n){
            return s+n;
        },0)
        let sum=goods2.reduce((s,n)=>s+n);

    some()
    every()


set和map数据结构
    set
        add(value)
        has(value)
        delte(value)
        clear
        forEach(n=>)
    map结构类似于对象，键值对的集合，键不限于字符创
        size 总数
        set(key,value) 根据key修改，没有key就新增
        get(key) 返回value或undefined
        has(key) true/false
        delete(key) true/false
        clear() 无返回值

        遍历
            keys()返回key的遍历器
            values()返回value的遍历器
            entries()返回所有成员的遍历器
            forEach()遍历所有成员


字符串新增方法
    startsWith
    endsWith

模板字符串
    反引号，多行，嵌入变量
    ` ${} `


解构赋值和扩展运算符
    解构赋值
        左右两边结构必须一样
        右边必须有值
        声明和赋值不能分开
        let [a,b,c]=[1,2,3,4];
        let {name,age}={name:'zhang',age:10};
        import {add} from './common.js'

    扩展运算符
        ...三点运算符
            let arr=[1,2,3];
            let arr1=[4,5,6];
            let arr2=[...arr,...arr1,7,8,9];
        展开数组
            function show(a,b,c){
                console.log(a);
                console.log(b);
                console.log(c);
            }
            let arr=[4,5,6]
            show(1,2,3);
            show(...arr);
        默认参数
            function show1(...args) {//可变参数
                console.log(args);
            }
            show1(2,34,5);
        


对象新语法
    class
        constructor是构造方法
        this关键字代表实例对象
        通过extends关键字实现继承
        super关键字，表示父类的构造函数，用来新建父类的thsi对象

    json
        const obj={name:"1",age:2,sex:"nan",say(){
                console.log(this.name)
            }};
            obj.say();
        JSON.stringify() 串行化/序列化   
            let str=JSON.stringify(obj);
            console.log(str);
        JSON.parse() 反串行化/反序列化  
            let jso=JSON.parse(str);
        简写
            const obj={name:"1",age:2,sex:"nan",say(){
                console.log(this.name)
            }};

